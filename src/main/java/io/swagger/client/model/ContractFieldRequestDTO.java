/*
 * Legislate API
 * The Legislate API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ContractFieldRequestDTO;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ContractFieldRequestDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-07T16:18:08.349882+02:00[Europe/Madrid]")
public class ContractFieldRequestDTO {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("nested_fields")
  private List<ContractFieldRequestDTO> nestedFields = null;

  @SerializedName("value")
  private String value = null;

  public ContractFieldRequestDTO id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public ContractFieldRequestDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the field which is being updated.
   * @return name
  **/
  @Schema(description = "The name of the field which is being updated.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ContractFieldRequestDTO nestedFields(List<ContractFieldRequestDTO> nestedFields) {
    this.nestedFields = nestedFields;
    return this;
  }

  public ContractFieldRequestDTO addNestedFieldsItem(ContractFieldRequestDTO nestedFieldsItem) {
    if (this.nestedFields == null) {
      this.nestedFields = new ArrayList<ContractFieldRequestDTO>();
    }
    this.nestedFields.add(nestedFieldsItem);
    return this;
  }

   /**
   * The nested fields if any.
   * @return nestedFields
  **/
  @Schema(description = "The nested fields if any.")
  public List<ContractFieldRequestDTO> getNestedFields() {
    return nestedFields;
  }

  public void setNestedFields(List<ContractFieldRequestDTO> nestedFields) {
    this.nestedFields = nestedFields;
  }

  public ContractFieldRequestDTO value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The new value for the contract field.
   * @return value
  **/
  @Schema(description = "The new value for the contract field.")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractFieldRequestDTO contractFieldRequestDTO = (ContractFieldRequestDTO) o;
    return Objects.equals(this.id, contractFieldRequestDTO.id) &&
        Objects.equals(this.name, contractFieldRequestDTO.name) &&
        Objects.equals(this.nestedFields, contractFieldRequestDTO.nestedFields) &&
        Objects.equals(this.value, contractFieldRequestDTO.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, nestedFields, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractFieldRequestDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nestedFields: ").append(toIndentedString(nestedFields)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
