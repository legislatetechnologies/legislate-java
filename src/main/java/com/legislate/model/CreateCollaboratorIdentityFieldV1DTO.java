/*
 * Legislate API
 * The Legislate API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.legislate.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.legislate.model.CreateCollaboratorIdentityFieldV1DTO;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * CreateCollaboratorIdentityFieldV1DTO
 */


public class CreateCollaboratorIdentityFieldV1DTO {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("nestedFields")
  private List<CreateCollaboratorIdentityFieldV1DTO> nestedFields = new ArrayList<CreateCollaboratorIdentityFieldV1DTO>();

  @SerializedName("value")
  private String value = null;

  public CreateCollaboratorIdentityFieldV1DTO id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * The unique Id of the field you&#x27;d like to update.
   * @return id
  **/
  @Schema(required = true, description = "The unique Id of the field you'd like to update.")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public CreateCollaboratorIdentityFieldV1DTO nestedFields(List<CreateCollaboratorIdentityFieldV1DTO> nestedFields) {
    this.nestedFields = nestedFields;
    return this;
  }

  public CreateCollaboratorIdentityFieldV1DTO addNestedFieldsItem(CreateCollaboratorIdentityFieldV1DTO nestedFieldsItem) {
    this.nestedFields.add(nestedFieldsItem);
    return this;
  }

   /**
   * Nested fields
   * @return nestedFields
  **/
  @Schema(required = true, description = "Nested fields")
  public List<CreateCollaboratorIdentityFieldV1DTO> getNestedFields() {
    return nestedFields;
  }

  public void setNestedFields(List<CreateCollaboratorIdentityFieldV1DTO> nestedFields) {
    this.nestedFields = nestedFields;
  }

  public CreateCollaboratorIdentityFieldV1DTO value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The new value of the contract field.
   * @return value
  **/
  @Schema(required = true, description = "The new value of the contract field.")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCollaboratorIdentityFieldV1DTO createCollaboratorIdentityFieldV1DTO = (CreateCollaboratorIdentityFieldV1DTO) o;
    return Objects.equals(this.id, createCollaboratorIdentityFieldV1DTO.id) &&
        Objects.equals(this.nestedFields, createCollaboratorIdentityFieldV1DTO.nestedFields) &&
        Objects.equals(this.value, createCollaboratorIdentityFieldV1DTO.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nestedFields, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCollaboratorIdentityFieldV1DTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nestedFields: ").append(toIndentedString(nestedFields)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
