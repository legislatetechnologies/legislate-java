/*
 * Legislate API
 * The Legislate API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.legislate.api;

import com.legislate.model.CollaboratorFieldsRequestDTO;
import com.legislate.model.CompanyCreatedResponseDTO;
import com.legislate.model.CompanyFieldsDTO;
import com.legislate.model.ContractCollaboratorResponseDTO;
import com.legislate.model.IdentityFieldsCollaboratorRoleDTO;
import com.legislate.model.Link;
import com.legislate.model.ObtainIdentityFieldsDTO;
import com.legislate.model.UpdateCollaboratorIdentityFieldsRequestDTO;
import com.legislate.model.UpdateFieldsCollaboratorDTO;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for CollaboratorsApi
 */
@Ignore
public class CollaboratorsApiTest {

    private final CollaboratorsApi api = new CollaboratorsApi();

    /**
     * Delete a Collaborator by its id.
     *
     * This operation will delete a Collaborator by its id.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteCollaboratorUsingDELETETest() throws Exception {
        Long collaboratorId = null;
        api.deleteCollaboratorUsingDELETE(collaboratorId);

        // TODO: test validations
    }
    /**
     * Get Identity fields due to role, side, template and collaboratorId
     *
     * This operation will retrieve the fields need to be filled due to a side and a list of roles.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCollaboratorIdentityFieldsByCollaboratorUsingGETTest() throws Exception {
        ObtainIdentityFieldsDTO body = null;
        Long idTemplate = null;
        List<IdentityFieldsCollaboratorRoleDTO> response = api.getCollaboratorIdentityFieldsByCollaboratorUsingGET(body, idTemplate);

        // TODO: test validations
    }
    /**
     * Get Identity fields
     *
     * This operation will retrieve the fields need to be filled due to a side and a list of roles.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCollaboratorIdentityFieldsUsingGETTest() throws Exception {
        Long idTemplate = null;
        List<String> roles = null;
        String side = null;
        List<IdentityFieldsCollaboratorRoleDTO> response = api.getCollaboratorIdentityFieldsUsingGET(idTemplate, roles, side);

        // TODO: test validations
    }
    /**
     * Get contract collaborator details
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCollaboratorUsingGETTest() throws Exception {
        Long collaboratorId = null;
        ContractCollaboratorResponseDTO response = api.getCollaboratorUsingGET(collaboratorId);

        // TODO: test validations
    }
    /**
     * Get collaborators for a given contract
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCollaboratorsUsingGETTest() throws Exception {
        Long contractId = null;
        List<ContractCollaboratorResponseDTO> response = api.getCollaboratorsUsingGET(contractId);

        // TODO: test validations
    }
    /**
     * Create a collaborator given a contract
     *
     * This operation will create a collaborator associated to the contract given
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postCollaboratorUsingPOSTTest() throws Exception {
        CollaboratorFieldsRequestDTO body = null;
        Long contractId = null;
        Link response = api.postCollaboratorUsingPOST(body, contractId);

        // TODO: test validations
    }
    /**
     * Create a company given a contract
     *
     * This operation will create a company associated to the contract given
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postCompanyUsingPOSTTest() throws Exception {
        CompanyFieldsDTO body = null;
        Long contractId = null;
        CompanyCreatedResponseDTO response = api.postCompanyUsingPOST(body, contractId);

        // TODO: test validations
    }
    /**
     * Upload a signature to a collaborator
     *
     * This operation will sign a contract.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCollaboratorBinaryFileSignatureUsingPATCHTest() throws Exception {
        Long collaboratorId = null;
        ContractCollaboratorResponseDTO response = api.updateCollaboratorBinaryFileSignatureUsingPATCH(collaboratorId);

        // TODO: test validations
    }
    /**
     * Update collaborator fields
     *
     * This operation will update a collaborator details.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCollaboratorFieldsUsingPATCHTest() throws Exception {
        UpdateCollaboratorIdentityFieldsRequestDTO body = null;
        Long collaboratorId = null;
        ContractCollaboratorResponseDTO response = api.updateCollaboratorFieldsUsingPATCH(body, collaboratorId);

        // TODO: test validations
    }
    /**
     * Update collaborator role
     *
     * This operation will update a collaborator fields.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCollaboratorRolesUsingPATCHTest() throws Exception {
        UpdateFieldsCollaboratorDTO body = null;
        Long collaboratorId = null;
        ContractCollaboratorResponseDTO response = api.updateCollaboratorRolesUsingPATCH(body, collaboratorId);

        // TODO: test validations
    }
    /**
     * Upload a signature to a collaborator
     *
     * This operation will sign a contract.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCollaboratorSignatureUsingPATCHTest() throws Exception {
        Long collaboratorId = null;
        ContractCollaboratorResponseDTO response = api.updateCollaboratorSignatureUsingPATCH(collaboratorId);

        // TODO: test validations
    }
}
