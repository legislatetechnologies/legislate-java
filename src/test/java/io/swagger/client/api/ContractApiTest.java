/*
 * Legislate API
 * The Legislate API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CollaboratorResponseDTO;
import io.swagger.client.model.ContractResponseDTO;
import io.swagger.client.model.CreateContractRequestDTO;
import io.swagger.client.model.Link;
import io.swagger.client.model.UpdateContractRequestDTO;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ContractApi
 */
@Ignore
public class ContractApiTest {

    private final ContractApi api = new ContractApi();

    /**
     * Deletes a contract by its id.
     *
     * This operation will delete a contract by its id.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteContractUsingDELETETest() throws Exception {
        Long contractId = null;
        CollaboratorResponseDTO response = api.deleteContractUsingDELETE(contractId);

        // TODO: test validations
    }
    /**
     * Get contract pdf
     *
     * Generate the pdf of a contract
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getContractFileUsingGETTest() throws Exception {
        Long contractId = null;
        byte[] response = api.getContractFileUsingGET(contractId);

        // TODO: test validations
    }
    /**
     * Get contract html
     *
     * Generate the html of a contract
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getContractHtmlUsingGETTest() throws Exception {
        Long contractId = null;
        String response = api.getContractHtmlUsingGET(contractId);

        // TODO: test validations
    }
    /**
     * Get contract details.
     *
     * This operation will retrieve details about a given contract.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getContractUsingGETTest() throws Exception {
        Long contractId = null;
        ContractResponseDTO response = api.getContractUsingGET(contractId);

        // TODO: test validations
    }
    /**
     * Get contracts in a team
     *
     * Fetch all the contracts which are part of a team
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getContractsUsingGETTest() throws Exception {
        Long teamId = null;
        List<ContractResponseDTO> response = api.getContractsUsingGET(teamId);

        // TODO: test validations
    }
    /**
     * Create a contract with an auto-generated bundle.
     *
     * This operation will create a contract inside an automatically generated bundle.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postContractUsingPOSTTest() throws Exception {
        CreateContractRequestDTO body = null;
        Long teamId = null;
        Link response = api.postContractUsingPOST(body, teamId);

        // TODO: test validations
    }
    /**
     * Updates a contract.
     *
     * This operation will update a contract details.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateContractUsingPATCHTest() throws Exception {
        UpdateContractRequestDTO body = null;
        Long contractId = null;
        ContractResponseDTO response = api.updateContractUsingPATCH(body, contractId);

        // TODO: test validations
    }
}
